name: GitHub Auto Tag & Release

on:
  push:
    branches: [ "master", "development" ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  tag_and_release:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Determine Branch and Set Label
        id: branch_label
        run: |
          BRANCH_NAME=${{ github.ref_name }}

          if [[ "$BRANCH_NAME" == "master" ]]; then
            LABEL="Master"
          elif [[ "$BRANCH_NAME" == "development" ]]; then
            LABEL="Dev"
          else
            echo "Error: Unsupported branch '$BRANCH_NAME'."
            exit 1
          fi

          echo "LABEL=$LABEL" >> $GITHUB_ENV

      - name: Fetch Latest Tag and Determine Next Version
        id: versioning
        run: |
          git fetch --tags

          LATEST_TAG=$(git tag -l "v*-${LABEL}" --sort=-v:refname | head -n 1 | tr -d '\r')

          if [[ -z "$LATEST_TAG" ]]; then
            NEW_TAG="v0.1.0-${LABEL}"
          else
            if [[ "$LATEST_TAG" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)-${LABEL}$ ]]; then
              MAJOR="${BASH_REMATCH[1]}"
              MINOR="${BASH_REMATCH[2]}"
              PATCH="${BASH_REMATCH[3]}"
            else
              echo "Error: Could not parse latest tag '$LATEST_TAG'"
              exit 1
            fi

            PATCH=$((PATCH + 1))
            NEW_TAG="v$MAJOR.$MINOR.$PATCH-${LABEL}"
          fi

          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

      - name: Configure Git User
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Create and Push New Git Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git tag "$NEW_TAG"
          git push origin "$NEW_TAG"

      - name: Prepare Deployment Message
        id: prepare_message
        run: |
          BRANCH=${{ github.ref_name }}
          REPO=${{ github.repository }}
          DEPLOY_NUMBER=${{ github.run_number }}
          GITHUB_RUN_URL="https://github.com/${REPO}/actions/runs/${{ github.run_id }}"
          COMMIT_HASH=${{ github.sha }}
          ACTOR=${{ github.actor }}
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          EVENT_TYPE=${{ github.event_name }}
          COMMIT_MSG=$(git log -1 --pretty=%B)
          WORKFLOW_NAME="${{ github.workflow }}"
          STATUS="${{ job.status }}"

          # Changed files
          CHANGED_FILES=$(git diff-tree --no-commit-id --name-only -r $COMMIT_HASH | sed 's/^/- /')
          FILE_COUNT=$(echo "$CHANGED_FILES" | grep -c '^' || true)

          # Pull request number (if any)
          PR_LINE=""
          if [[ "$EVENT_TYPE" == "pull_request" ]]; then
            PR_NUMBER=${{ github.event.pull_request.number }}
            PR_LINE="üì¨ Pull Request: [#${PR_NUMBER}](https://github.com/${REPO}/pull/${PR_NUMBER})\\n\\n"
          fi

          # Build final Markdown message
          MESSAGE="## üöÄ New Deployment to [$BRANCH](https://github.com/$REPO/tree/$BRANCH)\\n\\n"
          MESSAGE+="**üì¶ Deploy Number:** $DEPLOY_NUMBER\\n\\n"
          MESSAGE+="**üß™ Workflow:** $WORKFLOW_NAME\\n\\n"
          MESSAGE+="$PR_LINE"
          MESSAGE+="**üîó [View Workflow Run]($GITHUB_RUN_URL)**\\n\\n"
          MESSAGE+="**üîÑ Commit:** [$COMMIT_HASH](https://github.com/$REPO/commit/$COMMIT_HASH)\\n\\n"
          MESSAGE+="**üë§ Triggered by:** $ACTOR\\n\\n"
          MESSAGE+="**üìÖ Timestamp:** $TIMESTAMP\\n\\n"
          MESSAGE+="**üì¢ Event Type:** $EVENT_TYPE\\n\\n"
          MESSAGE+="**üìÇ Repository:** [$REPO](https://github.com/$REPO)\\n\\n"
          MESSAGE+="**üí¨ Commit Message:** _${COMMIT_MSG}_\\n\\n"

          if [ "$FILE_COUNT" -gt "0" ]; then
            MESSAGE+="## üìë Files Changed ($FILE_COUNT)\\n\\n"
            MESSAGE+="$CHANGED_FILES\\n\\n"
          fi

          MESSAGE+="## üìç Status\\n\\n"
          MESSAGE+="**$STATUS**\\n\\n"

          echo "MESSAGE<<EOF" >> $GITHUB_ENV
          echo -e "$MESSAGE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MESSAGE: ${{ env.MESSAGE }}
        run: |
          gh release create "$NEW_TAG" \
            --title "$NEW_TAG" \
            --notes "$MESSAGE"


      - name: Send GitHub Event Notification to Microsoft Teams
        env:
          WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_MASTER_URL }}
        run: |
              curl -H "Content-Type: application/json" -X POST -d \
              "{\"text\": \"${MESSAGE}\"}" "${WEBHOOK_URL}"
